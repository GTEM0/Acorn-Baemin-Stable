<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.acorn.LoginMapper">

	<!-- 손님 아이디 찾기 -->
	<select id="findCustomerId" resultType="UserDTO" parameterType="map">
		select userId
		from user_tbl
		where userEmail = #{userEmail} and userStatus = 1
	</select>

	<!-- 사장님 아이디 찾기 -->
	<select id="findSellerId" resultType="SellerDTO" parameterType="map">
		select sellerId
		from seller_tbl
		where sellerEmail =	#{sellerEmail} and sellerStatus = 1
	</select>

	<!-- 손님 비밀번호 찾기 -->
	<select id="finduserPw" resultType="UserDTO">
		select userPw
		from user_tbl
		where userId = #{userId}
		and userEmail = #{userEmail}
	</select>

	<!-- 사장님 비밀번호 찾기 -->
	<select id="findsellerPw" resultType="SellerDTO">
		select sellerPw
		from
		seller_tbl
		where sellerId = #{sellerId}
		and sellerEmail = #{sellerEmail}
	</select>

	<!-- 손님 비밀번호 초기화 -->
	<update id="resetCustomerPassword" parameterType="map">
		UPDATE user_tbl
		SET userPw = #{newPassword}
		WHERE userId = (
		SELECT userId
		FROM user_tbl
		WHERE userEmail = #{userEmail}
		)
	</update>

	<!-- 사장님 비밀번호 초기화 -->
	<update id="resetSellerPassword" parameterType="map">
		UPDATE seller_tbl
		SET sellerPw = #{newPassword}
		WHERE sellerId = (
		SELECT sellerId
		FROM
		seller_tbl
		WHERE sellerEmail = #{sellerEmail}
		)
	</update>

	<!-- 손님 회원 가입 -->
	<insert id="customerSignup" parameterType="UserDTO">
		insert into user_tbl
		(userId, userPw, userName, userNickname, userPhone, userEmail,
		userBirth, userGender, userPostCode, userAddress, userAddressDetail)
		values
		(#{userId}, #{userPw}, #{userName}, #{userNickname},
		#{userPhone}, #{userEmail}, #{userBirth}, #{userGender},
		#{userPostCode}, #{userAddress}, #{userAddressDetail})
	</insert>

	<!-- 사장님 회원 가입 -->
	<insert id="sellerSignup" parameterType="SellerDTO">
		insert into seller_tbl
		(sellerRegCode, sellerId, sellerPw, sellerName, sellerPhone,
		sellerEmail, sellerBirth, sellerGender)
		values
		(#{sellerRegCode},
		#{sellerId}, #{sellerPw}, #{sellerName}, #{sellerPhone},
		#{sellerEmail}, #{sellerBirth}, #{sellerGender})
	</insert>

	<!-- 손님 로그인 -->
	<select id="selectUserById" resultType="UserDTO"
		parameterType="UserDTO">
		select * from user_tbl where userId = #{userId} and
		userPw = #{userPw}
	</select>

	<!-- 사장님 로그인 -->
	<select id="selectSellerById" resultType="SellerDTO"
		parameterType="SellerDTO">
		select * from seller_tbl where sellerId = #{sellerId}
		and sellerPw = #{sellerPw}
	</select>


	<select id="getPasswordByUserId" resultType="String">
		select userPw
		from
		user_tbl
		where userId = #{userId}
	</select>

	<!-- 손님 정보 수정 -->
	<update id="updateInfoCustomer" parameterType="UserDTO">
		update user_tbl
		set
		userNickname = #{userNickname},
		userPw = #{userPw},
		userPhone =
		#{userPhone},
		userEmail = #{userEmail},
		userPostCode = #{userPostCode},
		userAddress = #{userAddress},
		userAddressDetail = #{userAddressDetail}
		where userCode = #{userCode}
	</update>

	<!-- 손님 정보 수정시 기존 정보 불러오기 -->
	<select id="selectCustomerInfo" resultType="UserDTO"
		parameterType="Integer">
		select userNickname, userPw, userPhone, userEmail,
		userPostCode, userAddress, userAddressDetail
		from user_tbl where
		userCode = #{userCode}
	</select>

	<!-- 사장님 정보 수정 -->
	<update id="updateInfoSeller" parameterType="SellerDTO">
		update seller_tbl
		set
		sellerName = #{sellerName},
		sellerPw = #{sellerPw},
		sellerPhone =
		#{sellerPhone},
		sellerEmail = #{sellerEmail},
		sellerRegCode =
		#{sellerRegCode}
		where sellerCode = #{sellerCode}
	</update>
	
	<!-- 손님 회원 탈퇴 -->
	<update id="signoutuser" parameterType="int">
		update user_tbl
		set
		userStatus = 0
		where userCode = #{userCode}
	</update>

	<!-- 사장님 회원 탈퇴 -->
	<update id="signoutseller" parameterType="int">
		update seller_tbl
		set
		sellerStatus = 0
		where sellerCode = #{sellerCode}
	</update>

	<!-- 사장님 정보 수정시 기존 정보 불러오기 -->
	<select id="selectSellerInfo" resultType="SellerDTO"
		parameterType="Integer">
		select sellerName, sellerPw, sellerPhone, sellerEmail,
		sellerRegCode
		from seller_tbl
		where sellerCode = #{userCode}
	</select>

	<!-- 손님 연락처 중복 확인 -->
	<select id="userPhoneCheck" resultType="int"
		parameterType="String">
		SELECT COUNT(*) FROM user_tbl WHERE userPhone =
		#{userPhone}
	</select>

	<!-- 사장님 연락처 중복 확인 -->
	<select id="sellerPhoneCheck" resultType="int"
		parameterType="String">
		SELECT COUNT(*) FROM seller_tbl WHERE sellerPhone =
		#{sellerPhone}
	</select>

	<!-- 손님 이메일 중복 확인 -->
	<select id="emailCheck" resultType="int" parameterType="String">
		SELECT
		COUNT(*) FROM user_tbl WHERE userEmail = #{userEmail}
	</select>

	<!-- 사장님 이메일 중복 확인 -->
	<select id="emailCheck2" resultType="int" parameterType="String">
		SELECT
		COUNT(*) FROM seller_tbl WHERE sellerEmail = #{sellerEmail}
	</select>

	<!-- 닉네임 중복 확인 -->
	<select id="nickCheck" resultType="int" parameterType="String">
		select
		count(*) from user_tbl where userNickname = #{userNickname}
	</select>

	<!-- 손님 아이디 중복 확인 -->
	<select id="idCheck" resultType="int" parameterType="String">
		select
		count(*) from user_tbl where userId = #{userId}
	</select>

	<!-- 사장님 아이디 중복 확인 -->
	<select id="idCheck2" resultType="int" parameterType="String">
		select
		count(*) from seller_tbl where sellerId = #{sellerId}
	</select>

	<!-- 사업자등록번호 중복 확인 -->
	<select id="sellerRegCodeCheck" resultType="int"
		parameterType="String">
		SELECT COUNT(*) FROM seller_tbl WHERE sellerRegCode =
		#{sellerRegCode}
	</select>


	<select id="getUserByUserId" resultType="UserDTO">
		select * from user_tbl
		where userId = #{userId}
	</select>

	<!-- 전체조회 -->
	<select id="selectAll" resultType="UserDTO">
		select * from user_tbl
	</select>

	<!-- 손님데이터 삭제 -->

	<update id="userInfoDelete">

	</update>

	<select id="findUserById" parameterType="java.lang.String"
		resultType="UserDTO">
		SELECT * FROM user_tbl WHERE userId = #{userId}
	</select>

	<select id="findUserByEmail" parameterType="java.lang.String"
		resultType="UserDTO">
		SELECT * FROM user_tbl WHERE userEmail = #{userEmail}
	</select>

	<update id="updatePassword" parameterType="UserDTO">
		UPDATE user_tbl
		SET
		userPw = #{userPw}
		WHERE userId = #{userId}
	</update>


<!-- 카카오 api에서 받아온 정보가 db에 있는지 확인 -->
	<select id="findKakao" parameterType="java.util.HashMap" resultType="UserDTO">
		SELECT * 
		FROM user_tbl 
		WHERE userEmail=#{email} AND userPhone=#{phoneNumber}
	</select>

<!-- 없다면 insert -->
	<insert id="kakaoInsert" parameterType="java.util.HashMap">
		INSERT INTO user_tbl (userEmail, userPhone, userAddress, userAddressDetail)
		VALUES(#{email}, #{phoneNumber}, #{baseAddress}, #{detailAddress})
	</insert>

	<!-- <select id="findUserByType" resultType="SellerDTO" parameterType="SellerDTO"> -->
	<!-- select * from seller_tbl where sellerId = #{sellerId} and sellerPw 
		= #{sellerPw} -->
	<!-- </select> -->

	<!-- <insert id="insertUser"> -->
	<!-- insert into user_tbl (userId, userPw, userName, userNickname, userPhone, 
		userAddress, userEmail, userBirth, userGender, userStatus) -->
	<!-- values (#{userId}, #{userPw}, #{userName}, #{userNickname}, #{userPhone}, 
		#{userAddress}, #{userEmail}, #{userBirth}, #{userGender}, #{userStatus}) -->
	<!-- </insert> -->

	<!-- <update id="updateUser"> -->
	<!-- update user_tbl -->
	<!-- set userName = #{userName}, userNickname = #{userNickname}, userPhone 
		= #{userPhone}, userAddress = #{userAddress}, userEmail = #{userEmail}, userBirth 
		= #{userBirth}, userGender = #{userGender} -->
	<!-- where userId = #{userId} -->
	<!-- </update> -->

	<!-- <delete id="deleteUser"> -->
	<!-- delete from user_tbl where userId = #{userId} -->
	<!-- </delete> -->
</mapper>